
window.onload = function () {

    doughmax1 = 0;

    const nextRecipe = () => {
        i = i + 1;
        console.log(i);
        if (i > 10) {
            return;
        }
        if (i == 4) {
            if (document.getElementById("emptyDough") == null) {
                console.log("Did not cook right!");
                let recipe = document.getElementById("recipe");
                i--;
                recipe.setAttribute('color', "red");
                recipe.setAttribute('value', "You have not yet rolled the dough!");

                for (let i = 0; i < 100; i++) {
                }
                recipe.setAttribute('color', "purple");

            }
        }
        console.log("logging i before the recipe" + i);
        let recipe = document.getElementById("recipe");
        const text = recipes[i];
        recipe.setAttribute('value', text);
    }

    const previousRecipe = () => {
        i = i - 1
        console.log(i);
        if (i < 1) {
            return;
        }
        let recipe = document.getElementById("recipe");
        const text = recipes[i];
        recipe.setAttribute('value', text);
    }




    let grabbedObject = null;
    let i = 1;

    let recipes = {
        1: 'Hello! Welcome to the Virtual Cooking Academy\n\n Please press on next',
        2: 'We are going to cook a peperoni pizza today',
        3: 'Let us start off with rolling the dough!',
        4: 'Nice!\nThe pizza dough is ready let us put the sauce now',
        5: 'Wow you are becoming an actual chef!\n Let us now place the peperoni on the pizza',
        6: 'Next let us cut the mushrooms',
        7: 'Nice, let us now place the mushrooms on the pizza',
        8: 'Place the cheese on the pizza now',
        9: 'Place the pizza in the oven for 30mins',
        10: 'Wow nice you have just cooked a virtual pizza'
    }

    console.log("Running...");

    const next = document.getElementById("next");
    next.addEventListener("click", nextRecipe);
    const back = document.getElementById("back");
    back.addEventListener("click", previousRecipe);

    const colliders = document.querySelectorAll('.collider');
    // Loop through each collider object and add an event listener for the "collide" event
    colliders.forEach(collider => {
        collider.addEventListener('grab-start', function (event) {
            // Retrieve the grabbed object
            grabbedObject = event.detail.target;
            //rotate the position of the object
            if (grabbedObject.id === "cut") {
                grabbedObject.setAttribute("rotation", { x: 0, y: -90, z: 0 });
                console.log(`Grabbed object: ${grabbedObject.id}`);
            }
        });

        collider.addEventListener('collide', e => {
            // Get the collided object
            const collidedObject = e.detail.body.el;

            // Log the collided object to the console
            //console.log(`Object ${collider.id} collided with object ${collidedObject.id}`);
            if (collider.id == "blue" && collidedObject.id == "yellow") {
            }

            if (collider.id === "rolling-pin" && collidedObject.id == "small-dough") {
                console.log("Colliding with rolling pin!");
                const rollingPin = collider.getObject3D('mesh');
                // Get the velocity of the rolling pin object
                console.log(rollingPin);
                //Expand collided object with animation
                console.log("The object is in speed");
                //Expand collided object with animation in x direction

                collidedObject.setAttribute('animation', {
                    property: 'scale',
                    to: '0.04 0.04 0.04',
                    dur: 3000,
                    easing: 'linear'
                });
                //Delete the object after that and replace it with another object
                setTimeout(() => {
                    let position = collidedObject.getAttribute('position');
                    let parent = collidedObject.parentElement;
                    collidedObject.parentElement.removeChild(collidedObject);
                    const newObject = document.createElement('a-entity'); // Change this to the type of object you want to replace it with
                    newObject.setAttribute('gltf-model', '#emptyCrust');
                    newObject.setAttribute('scale', '0.025 0.025 0.025');
                    newObject.setAttribute('position', position);
                    newObject.setAttribute('id', 'emptyDough');
                    newObject.setAttribute('body', 'shape:box');
                    newObject.setAttribute('grabbable', '');
                    newObject.setAttribute('collision-tracker', '');
                    parent.appendChild(newObject);
                }, 3000)
            }

            // ZIDA LA NSHUF MIN COLLIDING MAA MIN
            // console.log("Collider is: " + collider.id + " and Colliding is: " + collidedObject.id)


            // console.log("doughmax1 before if statement is " + doughmax1);
            if (collidedObject.id === "small-dough" && collider.id == "knife") {
                doughmax1 = doughmax1 + 1;
                //Cut the object in half
                console.log("Collided with knife")
                // console.log("doughmax1 entering if statement is " + doughmax1);
                if (doughmax1 == 1) {


                    setTimeout(() => {
                        let position = collidedObject.getAttribute('position');
                        let parent = collidedObject.parentElement;
                        collidedObject.parentElement.removeChild(collidedObject);
                        const newObject = document.createElement('a-entity'); // Change this to the type of object you want to replace it with
                        newObject.setAttribute('gltf-model', '#circle-dough');
                        newObject.setAttribute('position', { x: collidedObject.getAttribute('position').x, y: collidedObject.getAttribute('position').y, z: collidedObject.getAttribute('position').z });
                        newObject.setAttribute('id', 'NEW-SMALL-DOUGH-HALF-ORIGINAL');
                        // newObject.setAttribute('radius', object.getAttribute('radius') / 2);
                        // newObject.setAttribute('height', object.getAttribute('height') / 2);
                        newObject.setAttribute('scale', '0.01 0.01 0.01');
                        // newObject.setAttribute('color', object.getAttribute('color'));
                        newObject.setAttribute('shadow', 'cast: true; receive: false');
                        newObject.setAttribute('class', 'collider');
                        newObject.setAttribute('body', 'shape:box');
                        newObject.setAttribute('grabbable', '');
                        newObject.setAttribute('aabb-collider', 'objects: .collider');
                        newObject.setAttribute('collision-tracker', '');
                        parent.appendChild(newObject);




                        const newObject2 = document.createElement('a-entity');
                        newObject2.setAttribute('gltf-model', '#circle-dough');
                        newObject2.setAttribute('position', { x: collidedObject.getAttribute('position').x + 1, y: collidedObject.getAttribute('position').y, z: collidedObject.getAttribute('position').z });
                        newObject2.setAttribute('id', 'NEW-SMALL-DOUGH-HALF');
                        // newObject.setAttribute('radius', object.getAttribute('radius') / 2);
                        // newObject.setAttribute('height', object.getAttribute('height') / 2);
                        newObject2.setAttribute('scale', '0.01 0.01 0.01');
                        newObject2.setAttribute('color', collidedObject.getAttribute('color'));
                        newObject2.setAttribute('shadow', 'cast: true; receive: false');
                        newObject2.setAttribute('class', 'collider');
                        newObject2.setAttribute('body', 'shape:box');
                        newObject2.setAttribute('grabbable', '');
                        newObject2.setAttribute('aabb-collider', 'objects: .collider');
                        newObject2.setAttribute('collision-tracker', '');


                        // Append the new entity to the scene
                        parent.appendChild(newObject2);
                    }, 1000)

                    cutObjectinHalf(collidedObject);
                }


            }

        });

        //Add event listner for Gyroscope and for accelrometer
        window.addEventListener("deviceorientation", handleOrientation, true);
    });

    const cutObjectinHalf = (object) => {

        object.setAttribute('animation', {
            property: 'scale',
            to: '0.01 0.01 0.01', // Adjust the scale as needed
            dur: 1000,
            easing: 'linear',
        });

        setTimeout(() => {
            // let position = collidedObject.getAttribute('position');
            // let parent = collidedObject.parentElement;
            // collidedObject.parentElement.removeChild(collidedObject);
            // const newObject = document.createElement('a-entity'); // Change this to the type of object you want to replace it with
            // newObject.setAttribute('gltf-model', '#emptyCrust');
            // newObject.setAttribute('scale', '0.025 0.025 0.025');
            // newObject.setAttribute('position', position);
            // newObject.setAttribute('id', 'emptyDough');
            // newObject.setAttribute('body', 'shape:box');
            // newObject.setAttribute('grabbable', '');
            // newObject.setAttribute('collision-tracker', '');
            // parent.appendChild(newObject);


            // let parent = collidedObject.parentElement;
            // collidedObject.parentElement.removeChild(collidedObject);
            // const newObject2 = document.createElement('a-entity');
            // newObject2.setAttribute('gltf-model', '#circle-dough');
            // newObject2.setAttribute('position', { x: object.getAttribute('position').x, y: object.getAttribute('position').y, z: object.getAttribute('position').z });
            // newObject2.setAttribute('id', 'NEW-SMALL-DOUGH-HALF-ORIGINAL');
            // // newObject.setAttribute('radius', object.getAttribute('radius') / 2);
            // // newObject.setAttribute('height', object.getAttribute('height') / 2);
            // newObject2.setAttribute('scale', '0.01 0.01 0.01');
            // newObject2.setAttribute('color', object.getAttribute('color'));
            // newObject2.setAttribute('shadow', 'cast: true; receive: false');
            // newObject2.setAttribute('class', 'collider');
            // newObject2.setAttribute('body', 'shape:box');
            // newObject2.setAttribute('grabbable', '');
            // newObject2.setAttribute('aabb-collider', 'objects: .collider');
            // newObject2.setAttribute('collision-tracker', '');

            // object.parentElement.appendChild(newObject2);


            // const newObject2 = document.createElement('a-entity');
            // newObject2.setAttribute('gltf-model', '#circle-dough');
            // newObject2.setAttribute('position', { x: object.getAttribute('position').x + 1, y: object.getAttribute('position').y, z: object.getAttribute('position').z });
            // newObject2.setAttribute('id', 'NEW-SMALL-DOUGH-HALF');
            // // newObject.setAttribute('radius', object.getAttribute('radius') / 2);
            // // newObject.setAttribute('height', object.getAttribute('height') / 2);
            // newObject2.setAttribute('scale', '0.01 0.01 0.01');
            // newObject2.setAttribute('color', object.getAttribute('color'));
            // newObject2.setAttribute('shadow', 'cast: true; receive: false');
            // newObject2.setAttribute('class', 'collider');
            // newObject2.setAttribute('body', 'shape:box');
            // newObject2.setAttribute('grabbable', '');
            // newObject2.setAttribute('aabb-collider', 'objects: .collider');
            // newObject2.setAttribute('collision-tracker', '');


            // // Append the new entity to the scene
            // object.parentElement.appendChild(newObject2);


        }, 2000)


        // const newObject = document.createElement('a-entity');
        // newObject.setAttribute('gltf-model', '#circle-dough');
        // newObject.setAttribute('position', { x: object.getAttribute('position').x + 1, y: object.getAttribute('position').y, z: object.getAttribute('position').z });
        // newObject.setAttribute('id', 'NEW-SMALL-DOUGH-HALF');
        // // newObject.setAttribute('radius', object.getAttribute('radius') / 2);
        // // newObject.setAttribute('height', object.getAttribute('height') / 2);
        // newObject.setAttribute('scale', '0.01 0.01 0.01');
        // newObject.setAttribute('color', object.getAttribute('color'));
        // newObject.setAttribute('shadow', 'cast: true; receive: false');
        // newObject.setAttribute('class', 'collider');
        // newObject.setAttribute('body', 'shape:box');
        // newObject.setAttribute('grabbable', '');
        // newObject.setAttribute('aabb-collider', 'objects: .collider');
        // newObject.setAttribute('collision-tracker', '');


        // // Append the new entity to the scene
        // object.parentElement.appendChild(newObject);
    }

    function handleOrientation(gyroscope) {
        const absolute = gyroscope.absolute;
        const alpha = gyroscope.alpha;
        const beta = gyroscope.beta;
        const gamma = gyroscope.gamma;

        // Move camera based on change in orientation
        const camera = document.getElementById('pov');

        if (gyroscope.x > 0.5) {
            camera.setAttribute('position', { x: camera.getAttribute('position').x + 0.1, y: camera.getAttribute('position').y, z: camera.getAttribute('position').z });
        }
        if (gyroscope.x < -0.5) {
            camera.setAttribute('position', { x: camera.getAttribute('position').x - 0.1, y: camera.getAttribute('position').y, z: camera.getAttribute('position').z });
        }
        if (gyroscope.y > 0.5) {
            camera.setAttribute('position', { x: camera.getAttribute('position').x, y: camera.getAttribute('position').y + 0.1, z: camera.getAttribute('position').z });
        }
        if (gyroscope.y < -0.5) {
            camera.setAttribute('position', { x: camera.getAttribute('position').x, y: camera.getAttribute('position').y - 0.1, z: camera.getAttribute('position').z });
        }
        if (gyroscope.z > 0.5) {
            camera.setAttribute('position', { x: camera.getAttribute('position').x, y: camera.getAttribute('position').y, z: camera.getAttribute('position').z + 0.1 });
        }
        if (gyroscope.z < -0.5) {
            camera.setAttribute('position', { x: camera.getAttribute('position').x, y: camera.getAttribute('position').y, z: camera.getAttribute('position').z - 0.1 });
        }

    }




    AFRAME.registerComponent('click-handler', {
        init: function () {
            var el = this.el;
            var sound = document.getElementById('stove-sound');

            el.addEventListener('click', function () {
                sound.play();
                // Add your additional logic here when the entity is clicked
            });
        }
    });
}
